basePath: /api/v1
definitions:
  domain.LoginPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        minLength: 5
        type: string
    required:
    - email
    - password
    type: object
  domain.LoginResponse:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      user:
        $ref: '#/definitions/domain.UserResponse'
    type: object
  domain.RegisterPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
      password:
        example: password123
        minLength: 5
        type: string
    required:
    - email
    - name
    - password
    type: object
  domain.UserResponse:
    properties:
      avatarUrl:
        example: https://example.com/avatar.jpg
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      employeeId:
        example: EMP001
        type: string
      fullName:
        example: John Doe
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      isActive:
        example: true
        type: boolean
      name:
        example: john_doe
        type: string
      preferredLang:
        example: en
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.UserRole'
        example: Admin
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  domain.UserRole:
    enum:
    - Admin
    - Staff
    - Employee
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleStaff
    - RoleEmployee
  web.ErrorResponse:
    properties:
      error: {}
      message:
        type: string
      status:
        type: string
    type: object
  web.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  web.ValidationError:
    properties:
      field:
        type: string
      message:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
host: localhost:5000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive inventory management API with JWT authentication, multi-language
    support, and CRUD operations for assets, users, and locations.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Inventory Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT tokens
      parameters:
      - description: User login credentials
        in: body
        name: loginPayload
        required: true
        schema:
          $ref: '#/definitions/domain.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/web.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.LoginResponse'
              type: object
        "400":
          description: Validation failed
          schema:
            allOf:
            - $ref: '#/definitions/web.ErrorResponse'
            - properties:
                error:
                  items:
                    $ref: '#/definitions/web.ValidationError'
                  type: array
              type: object
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with name, email, and password
      parameters:
      - description: User registration data
        in: body
        name: registerPayload
        required: true
        schema:
          $ref: '#/definitions/domain.RegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/web.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.UserResponse'
              type: object
        "400":
          description: Validation failed
          schema:
            allOf:
            - $ref: '#/definitions/web.ErrorResponse'
            - properties:
                error:
                  items:
                    $ref: '#/definitions/web.ValidationError'
                  type: array
              type: object
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
